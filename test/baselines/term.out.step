let term = fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) in (lambda term 5)
(lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) 5)
if (5 == 0) then  5 else (5 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (5 - 1)))
if false then  5 else (5 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (5 - 1)))
if false then  5 else (5 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) 4))
if false then  5 else (5 + if (4 == 0) then  4 else (4 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (4 - 1))))
if false then  5 else (5 + if false then  4 else (4 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (4 - 1))))
if false then  5 else (5 + if false then  4 else (4 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) 3)))
if false then  5 else (5 + if false then  4 else (4 + if (3 == 0) then  3 else (3 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (3 - 1)))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (3 - 1)))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) 2))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if (2 == 0) then  2 else (2 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (2 - 1))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (2 - 1))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) 1)))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if (1 == 0) then  1 else (1 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (1 - 1)))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if false then  1 else (1 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (1 - 1)))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if false then  1 else (1 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) 0))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if false then  1 else (1 + if (0 == 0) then  0 else (0 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (0 - 1))))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if false then  1 else (1 + if true then  0 else (0 + (lambda fix f n -> if (n == 0) then  n else (n + (lambda f (n - 1))) (0 - 1))))))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if false then  1 else (1 + 0)))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + if false then  1 else 1))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else (2 + 1))))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + if false then  2 else 3)))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else (3 + 3)))
if false then  5 else (5 + if false then  4 else (4 + if false then  3 else 6))
if false then  5 else (5 + if false then  4 else (4 + 6))
if false then  5 else (5 + if false then  4 else 10)
if false then  5 else (5 + 10)
if false then  5 else 15
15
