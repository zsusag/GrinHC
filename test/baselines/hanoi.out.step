let hanoi = fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) in (lambda hanoi 7)
(lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 7)
if (7 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (7 - 1))) + 1)
if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (7 - 1))) + 1)
if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 6)) + 1)
if false then  1 else ((2 * if (6 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (6 - 1))) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (6 - 1))) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 5)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if (5 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (5 - 1))) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (5 - 1))) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 4)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if (4 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (4 - 1))) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (4 - 1))) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 3)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if (3 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (3 - 1))) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (3 - 1))) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 2)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if (2 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (2 - 1))) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (2 - 1))) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) 1)) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if (1 == 1) then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (1 - 1))) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if true then  1 else ((2 * (lambda fix f n -> if (n == 1) then  1 else ((2 * (lambda f (n - 1))) + 1) (1 - 1))) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * 1) + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else (2 + 1)) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else 3) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * 3) + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else (6 + 1)) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else 7) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * 7) + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else (14 + 1)) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else 15) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else ((2 * 15) + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else (30 + 1)) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * if false then  1 else 31) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else ((2 * 31) + 1)) + 1)
if false then  1 else ((2 * if false then  1 else (62 + 1)) + 1)
if false then  1 else ((2 * if false then  1 else 63) + 1)
if false then  1 else ((2 * 63) + 1)
if false then  1 else (126 + 1)
if false then  1 else 127
127
