let fact = fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 in (lambda fact 5)
(lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 5)
if (5 > 0) then  (5 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (5 - 1))) else 1
if true then  (5 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (5 - 1))) else 1
if true then  (5 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 4)) else 1
if true then  (5 * if (4 > 0) then  (4 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (4 - 1))) else 1) else 1
if true then  (5 * if true then  (4 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (4 - 1))) else 1) else 1
if true then  (5 * if true then  (4 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 3)) else 1) else 1
if true then  (5 * if true then  (4 * if (3 > 0) then  (3 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (3 - 1))) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (3 - 1))) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 2)) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if (2 > 0) then  (2 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (2 - 1))) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (2 - 1))) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 1)) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if (1 > 0) then  (1 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (1 - 1))) else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if true then  (1 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (1 - 1))) else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if true then  (1 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 0)) else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if true then  (1 * if (0 > 0) then  (0 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (0 - 1))) else 1) else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if true then  (1 * if false then  (0 * (lambda fix f n -> if (n > 0) then  (n * (lambda f (n - 1))) else 1 (0 - 1))) else 1) else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if true then  (1 * 1) else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * if true then  1 else 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  (2 * 1) else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * if true then  2 else 1) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  (3 * 2) else 1) else 1) else 1
if true then  (5 * if true then  (4 * if true then  6 else 1) else 1) else 1
if true then  (5 * if true then  (4 * 6) else 1) else 1
if true then  (5 * if true then  24 else 1) else 1
if true then  (5 * 24) else 1
if true then  120 else 1
120
