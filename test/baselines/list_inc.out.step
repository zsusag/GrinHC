let inc = fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) in (lambda inc 4, 5, 2, 1)
(lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) 4, 5, 2, 1)
if empty 4, 5, 2, 1 then  [] else (head 4, 5, 2, 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 4, 5, 2, 1)
if false then  [] else (head 4, 5, 2, 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 4, 5, 2, 1)
if false then  [] else (4 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 4, 5, 2, 1)
if false then  [] else 5, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 4, 5, 2, 1)
if false then  [] else 5, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) 5, 2, 1)
if false then  [] else 5, if empty 5, 2, 1 then  [] else (head 5, 2, 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 5, 2, 1)
if false then  [] else 5, if false then  [] else (head 5, 2, 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 5, 2, 1)
if false then  [] else 5, if false then  [] else (5 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 5, 2, 1)
if false then  [] else 5, if false then  [] else 6, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 5, 2, 1)
if false then  [] else 5, if false then  [] else 6, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) 2, 1)
if false then  [] else 5, if false then  [] else 6, if empty 2, 1 then  [] else (head 2, 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 2, 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else (head 2, 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 2, 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else (2 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 2, 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 2, 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if empty 1 then  [] else (head 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else (head 1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else (1 + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else 2, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail 1)
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else 2, (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) [])
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else 2, if empty [] then  [] else (head [] + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail [])
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else 2, if true then  [] else (head [] + 1), (lambda fix f xs -> if empty xs then  [] else (head xs + 1), (lambda f tail xs) tail [])
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, if false then  [] else 2
if false then  [] else 5, if false then  [] else 6, if false then  [] else 3, 2
if false then  [] else 5, if false then  [] else 6, 3, 2
if false then  [] else 5, 6, 3, 2
[5, 6, 3, 2]
